#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('Server:server');
var http = require('http');
var express = require('express');
var app = express();

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');

/**
 * PeerJS server
 */
var PeerServer = require('peer').PeerServer;
var server = PeerServer({ port: 9000, path: '/peerjs' });

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);

// map: username - {socket: string, peerid: string}
var users = {};

io.on('connection', function (socket) {

    // connect
    socket.on('login', function (username, peerid) {
        if (users[username]) {
            socket.emit('login', false);
        } else {
            users[username] = { socket: socket, peerid: peerid };
            socket.emit('login', true);
            socket.broadcast.emit('join', username);
        }
    });

    // call
    socket.on('call', function (caller, callee) {
        let calleeSocketid = users[callee] && users[callee].socket && users[callee].socket.id;
        let callerPeerid = users[caller] && users[caller].peerid;
        if (calleeSocketid && callerPeerid) {
            socket.broadcast.to(calleeSocketid).emit('notify', caller, callerPeerid);
        }
    })

    // ask for other users
    socket.on('users', function (username) {
        var others = Object.keys(users);
        others.splice(others.indexOf(username), 1);
        socket.emit('users', others);
    })

    // remove connection from listening sockets
    socket.on('disconnect', function () {
        let username = nameBySocket(users, socket);
        if (username) {
            delete users[username];
            socket.broadcast.emit('leave', username);
        }
    });
});

/**
 * Retrieves key of value
 * @param object 
 * @param value 
 */
function nameBySocket(users, socket) {
    for (var username in users) {
        if (users.hasOwnProperty(username)) {
            if (users[username].socket === socket) {
                return username;
            }
        }
    }
    return null;
}

/**
 * Listen on provided port, on all network interfaces.
 */
console.log('server listening on port ' + port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
